@prefix      rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
@prefix     rdfs: <http://www.w3.org/2000/01/rdf-schema#>
@prefix       sh: <http://www.w3.org/ns/shacl#>
@prefix      xsd: <http://www.w3.org/2001/XMLSchema#>
@prefix      owl: <http://www.w3.org/2002/07/owl#>
@prefix oboInOwl: <http://www.geneontology.org/formats/oboInOwl#>
@prefix      obo: <http://purl.obolibrary.org/obo/>
@prefix       ex: <http://example.org/>


ex:TextValuesShouldNotContainDoubleSpaces
    rdfs:label "Text values should not contain double spaces." ;
    a sh:Shape ;
    sh:scope [
        a sh:AllObjectsScope ;
    ] ;
    sh:filterShape [
        sh:constraint [
            sh:nodeKind sh:Literal ;
            sh:datatype xsd:string 
        ]
    ] ;
    sh:constraint [
        sh:not [
            sh:constraint [
                sh:pattern "  "
            ]
        ]
    ] .


ex:NoSynonymShouldEqualLabel
    rdfs:label "A synonym should not be the same as the label of a term." ;
    a sh:Shape ;
    sh:scope [
        a sh:AllSubjectsScope ;
    ] ;
    sh:constraint [
        sh:and (
            [
                sh:property [
                    sh:predicate rdfs:label ;
                    sh:notEquals oboInOwl:hasRelatedSynonym ;
                ]
            ]
            [
                sh:property [
                    sh:predicate rdfs:label ;
                    sh:notEquals oboInOwl:hasExactSynonym ;
                ]
            ]
            [
                sh:property [
                    sh:predicate rdfs:label ;
                    sh:notEquals oboInOwl:hasNarrowSynonym ;
                ]
            ]
            [
                sh:property [
                    sh:predicate rdfs:label ;
                    sh:notEquals oboInOwl:hasBroadSynonym ;
                ]
            ]
        )
    ] .


ex:ShouldNotHaveLeadingOrTrailingSpaces
    rdfs:label "Text values should not have leading or trailing spaces." ;
    a sh:Shape ;
    sh:scope [
        a sh:AllObjectsScope ;
    ] ;
    sh:filterShape [
        sh:constraint [
            sh:nodeKind sh:Literal ;
            sh:datatype xsd:string 
        ]
    ] ;
    sh:constraint [
        sh:and (
            [
                sh:constraint [
                    sh:not [
                        sh:constraint [
                            sh:pattern "^ "
                        ]
                    ]
                ]
            ]
            [
                sh:constraint [
                    sh:not [
                        sh:constraint [
                            sh:pattern " $"
                        ]
                    ]
                ]
            ]
        )
    ] .


ex:LabelsShouldBeUnique
    rdfs:label "A given label should only be used for one term in the ontology." ;
    a sh:Shape ;
    sh:scope [
        a sh:AllObjectsScope ;
    ] ;
    sh:inverseProperty [
        sh:predicate rdfs:label ;
        sh:maxCount 1
    ] .


ex:ExactSynonymsShouldBeUnique
    rdfs:label "A given exact synonym should only be used for one term in the ontology." ;
    a sh:Shape ;
    sh:scope [
        a sh:AllObjectsScope ;
    ] ;
    sh:inverseProperty [
        sh:predicate oboInOwl:hasExactSynonym ;
        sh:maxCount 1
    ] .


ex:NamedClass
    a sh:Shape ;
    sh:property [
        sh:predicate rdf:type ;
        sh:hasValue owl:Class
    ] ;
    sh:constraint [
        sh:nodeKind sh:IRI
    ] .


ex:NotObsoleteNamedClass
    a sh:Shape ;
    sh:constraint [
        sh:and (
            ex:NamedClass
            [
                sh:constraint [
                    sh:not [
                        sh:property [
                            sh:predicate owl:deprecated ;
                            sh:hasValue true
                        ]
                    ]
                ]
            ]
        )
    ] .


ex:EveryClassShouldHaveADefinition
    rdfs:label "Every class should have a definition." ;
    a sh:Shape ;
    sh:scopeClass owl:Class ;
    sh:filterShape ex:NotObsoleteNamedClass ;
    sh:property [
        sh:predicate obo:IAO_0000115 ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1
    ] .
    
    
ex:ValueNotShortFormForObsoleteTerm
    a sh:SPARQLConstraint ;
    sh:message "Value must not be obsolete." ;
    sh:sparql """
        SELECT $this ($this AS ?subject) (<http://www.w3.org/2002/07/owl#deprecated> AS ?predicate) (true AS ?object)
        WHERE {
            BIND(IRI(CONCAT("http://purl.obolibrary.org/obo/", REPLACE($this, ":", "_"))) AS ?alt)
            ?alt <http://www.w3.org/2002/07/owl#deprecated> true .
        }
        """ .


ex:AltIDsShouldNotPointToObsoleteTerms
    a sh:Shape ;
    sh:scope [
        a sh:PropertyScope ;
        sh:predicate oboInOwl:hasAlternativeId ;
    ] ;
    sh:property [
        sh:predicate oboInOwl:hasAlternativeId ;
        sh:valueShape [
            sh:constraint ex:ValueNotShortFormForObsoleteTerm
        ]
    ] .

